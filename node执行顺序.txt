js是单线程的，基于事件循环，非阻塞IO的。
特点： 处理I／O型的应用，不适合CPU运算密集型的应用。
说明： 事件循环中使用一个事件队列，在每个时间点上，系统只会处理一个事件，即使电脑有多个CPU核心，也无法同时并行的处理多个事件。因此，node.js在I／O型的应用中，给每一个输入输出定义一个回调函数，node.js会自动将其加入到事件轮询的处理队列里，当I／O操作完成后，这个回调函数会被触发，系统会继续处理其他的请求。

javaSricpt中存在三种队列
执行队列	微队列	宏队列
代码从上至下执行：
	普通代码进入执行队列，
	回调函数进入微队列，
	timeout系列、i/o系列进入宏队列
先进行执行队列，
	执行队列为空时，将微队列加入执行队列
		微队列为空时，执行宏队列
宏队列为空时，执行上一阶段产生了这三种队列任务。

例：
function fn(){
    console.log(1);
    
    setTimeout(() => {
        console.log(2);
        Promise.resolve().then(() => {
            console.log(3)
        });
    });
    
    new Promise((resolve, reject) => {
        console.log(4)
        resolve(5)
    }).then((data) => {
        console.log(data);
        
        Promise.resolve().then(() => {
            console.log(6)
        }).then(() => {
            console.log(7)
            
            setTimeout(() => {
                console.log(8)
            }, 0);
        });
    })
    
    setTimeout(() => {
        console.log(9);
    })
    
    console.log(10);
}
console.log("a")
fn();
console.log("b")

//a 	1 	4 	10 	b 	5 	6 	7 	2 	3 	9 	8